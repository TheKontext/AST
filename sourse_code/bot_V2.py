from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv
import os
import ai_V5

load_dotenv()

router = Router()


class Form(StatesGroup):
    waiting_for_intro = State()
    waiting_for_answers = State()


hello_message = '''
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ASTfy! üåü

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:
1Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã 
2Ô∏è‚É£ –í—ã—è–≤–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç–∏
3Ô∏è‚É£ –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏

<b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "üîç –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", –∏ –º—ã –Ω–∞—á–Ω—ë–º!</b>
'''


def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üîç –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    return builder.as_markup(resize_keyboard=True)


def get_restart_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="/start")
    return builder.as_markup(resize_keyboard=True)


@router.message(Command("start"))
async def start_handler(message: Message):
    await message.answer(
        hello_message,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )


@router.message(F.text == "üîç –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def start_testing(message: Message, state: FSMContext):
    await message.answer(
        "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ, —Å–≤–æ–∏—Ö —É–≤–ª–µ—á–µ–Ω–∏—è—Ö –∏ —Ö–æ–±–±–∏",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Form.waiting_for_intro)


@router.message(Form.waiting_for_intro)
async def process_intro(message: Message, state: FSMContext):
    try:
        response = ai_V5.main(message.text)
        if '–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, —á—Ç–æ –Ω–∞—à–ª–æ—Å—å –≤ –ø–æ–∏—Å–∫–µ' in response.lower():
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ",
                reply_markup=get_restart_keyboard()
            )
            await state.clear()
            return

        await state.set_state(Form.waiting_for_answers)
        await message.answer(
            f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n{response}\n\n"
            "<b>P.S. –ü–∏—à–∏ –Ω–∞—Å—Ç–æ–ª—å–∫–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ, –Ω–∞ —Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æüòâ</b>",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardRemove()
        )

    except Exception as e:
        await message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_restart_keyboard()
        )
        await state.clear()


@router.message(Form.waiting_for_answers)
async def process_answers(message: Message, state: FSMContext):
    try:
        response = ai_V5.ans(message.text)
        if '–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, —á—Ç–æ –Ω–∞—à–ª–æ—Å—å –≤ –ø–æ–∏—Å–∫–µ' in response.lower():
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ",
                reply_markup=get_restart_keyboard()
            )
        else:
            await message.answer(
                f"–°—É–ø–µ—Ä! –í–æ—Ç —Ä—è–¥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ç–µ–±–µ –ø–æ–¥–æ–π—Ç–∏:\n\n{response}\n\n"
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /start",
                parse_mode="HTML",
                reply_markup=get_restart_keyboard()
            )

        await state.clear()

    except Exception as e:
        await message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_restart_keyboard()
        )
        await state.clear()


async def main():
    bot = Bot(token=os.getenv('TOKEN'))
    dp = Dispatcher()
    dp.include_router(router)

    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())